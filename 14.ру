#Используйте файл с оценками фильмов ml-latest-small/ratings.csv. 
Посчитайте среднее время жизни пользователей, которые выставили более 100 оценок. 
Под временем жизни понимается разница между максимальным и минимальным значением столбца timestamp для данного значения userId.

#Идет некорректный подсчет разницы между мин и мах, начиная с 7 строки. Мин и мах считает правильно
import pandas as pd
ratings = pd.read_csv('C:\\Users\\Ольга\\Desktop\\ratings.csv')

ratings['date'] = pd.to_datetime(ratings['timestamp'], unit='s')
ratings_grouped = ratings.groupby(['userId']).agg({'rating':['count'],'date': ['max','min']}).reset_index()
ratings_grouped['diff'] = ratings_grouped['date']['max'] - ratings_grouped['date']['min'].head()
filtered_ratings = ratings_grouped[ (ratings_grouped['rating', 'count'] >= 100)]
filtered_ratings

#Дана статистика услуг перевозок клиентов компании по типам (см. файл с кодом занятия). Необходимо сформировать две таблицы:
таблицу с тремя типами выручки для каждого client_id без указания адреса клиента
аналогичную таблицу по типам выручки с указанием адреса клиента
Обратите внимание, что в процессе объединения таблиц данные не должны теряться

rzd = pd.DataFrame({'client_id': [111, 112, 113, 114, 115],
                    'rzd_revenue': [1093, 2810, 10283, 5774, 981]})
auto = pd.DataFrame({'client_id': [113, 114, 115, 116, 117],
                    'auto_revenue': [57483, 83, 912, 4834, 98]})
auto

air = pd.DataFrame({'client_id': [115, 116, 117, 118],
                    'air_revenue': [81, 4, 13, 173]})
air


client_base = pd.DataFrame({'client_id': [111, 112, 113, 114, 115, 116, 117, 118],
                           'address': ['Комсомольская 4', 'Энтузиастов 8а', 'Левобережная 1а', 'Мира 14', 'ЗЖБИиДК 1', 'Строителей 18', 'Панфиловская 33', 'Мастеркова 4']})
client_base


total_revenue = pd.merge(auto,rzd,on = 'client_id', how='outer')
total_revenue1 = pd.merge(total_revenue,air,on = 'client_id', how='outer')
total_revenue_adress = pd.merge(total_revenue1,client_base,on = 'client_id', how='outer')
total_revenue_adress

#У каждого пользователя известен набор координат. А для связывания с визитом или фактом покупки скорее всего потребуется одно-два числа. Как их получить?

Связываем пользователя с магазином. Первая таблица Магазины. Используем лефт иннер. Связываем по координатам магазина. Совпадение координат - означает посещение пользователя

#Наборы координат одного и того же пользователя могут быть значительно удалены друг от друга. Как это отразится на вопросе расчетах пункта 1?
Никак не отразится, так как в таблицу пойдут только координаты магазина. Если посетитель был где-то в другом месте, то конкретно к магазину это не относится.
#Какие дополнительные признаки можно получить из координат? Ведь это просто числа, которые сами по себе мало что дают.
Можно вычесть охват магазина по территории. Сколько километров обслуживает этот магазин. Можно вычесть средний чек по признакам посетители, которые живут близко, в средней удаленности и т.д. 
